import DOMPurify from 'dompurify'
import katex from 'katex'

/**
 * Composable for safely rendering HTML and LaTeX content in dataset items
 */
export function useContentRenderer() {
  /**
   * Sanitize HTML content to prevent XSS attacks
   * Removes dangerous tags like <script>, <object>, <iframe>, etc.
   */
  function sanitizeHTML(content: string): string {
    if (typeof window === 'undefined') {
      // Server-side: return content as-is for now
      // In a real production app, you might want to use isomorphic-dompurify
      return content
    }

    const config = {
      // Allow common formatting tags
      ALLOWED_TAGS: [
        'p',
        'div',
        'span',
        'br',
        'hr',
        'h1',
        'h2',
        'h3',
        'h4',
        'h5',
        'h6',
        'strong',
        'b',
        'em',
        'i',
        'u',
        'sub',
        'sup',
        'ul',
        'ol',
        'li',
        'table',
        'thead',
        'tbody',
        'tr',
        'th',
        'td',
        'blockquote',
        'pre',
        'code',
        'a',
      ],
      ALLOWED_ATTR: [
        'class',
        'id',
        'style',
        'href',
        'title',
        'alt',
      ],
      // Remove dangerous attributes
      FORBID_ATTR: ['onclick', 'onload', 'onerror', 'onmouseover'],
      // Ensure links are safe
      ALLOWED_URI_REGEXP: /^(?:(?:(?:f|ht)tps?|mailto|tel|callto|cid|xmpp):|[^a-z]|[a-z+.\-]+(?:[^a-z+.\-:]|$))/i,
    }

    return DOMPurify.sanitize(content, config)
  }

  /**
   * Render inline LaTeX expressions using KaTeX
   * Supports both $...$ and $$...$$ syntax
   */
  function renderLaTeX(content: string): string {
    if (typeof window === 'undefined') {
      // Server-side: return content as-is
      return content
    }

    try {
      // Replace $$...$$ (display math) first
      content = content.replace(/\$\$(.*?)\$\$/g, (match, latex) => {
        try {
          return katex.renderToString(latex.trim(), {
            displayMode: true,
            throwOnError: false,
            trust: false,
          })
        }
        catch (error) {
          console.warn('LaTeX rendering error (display):', error)
          return match // Return original if rendering fails
        }
      })

      // Replace $...$ (inline math)
      content = content.replace(/\$([^$]+)\$/g, (match, latex) => {
        try {
          return katex.renderToString(latex.trim(), {
            displayMode: false,
            throwOnError: false,
            trust: false,
          })
        }
        catch (error) {
          console.warn('LaTeX rendering error (inline):', error)
          return match // Return original if rendering fails
        }
      })

      return content
    }
    catch (error) {
      console.warn('LaTeX processing error:', error)
      return content // Return original content if processing fails
    }
  }

  /**
   * Process content by applying both HTML sanitization and LaTeX rendering
   * Order: LaTeX first, then HTML sanitization (to allow LaTeX-generated HTML)
   */
  function processContent(content: string): string {
    if (!content || typeof content !== 'string') {
      return content || ''
    }

    // First render LaTeX expressions
    let processed = renderLaTeX(content)

    // Then sanitize the HTML (including any HTML generated by LaTeX)
    processed = sanitizeHTML(processed)

    return processed
  }

  /**
   * Check if content contains LaTeX expressions
   */
  function hasLaTeX(content: string): boolean {
    if (!content || typeof content !== 'string') {
      return false
    }
    return /\$\$?[^$]+\$\$?/.test(content)
  }

  /**
   * Check if content contains HTML tags
   */
  function hasHTML(content: string): boolean {
    if (!content || typeof content !== 'string') {
      return false
    }
    return /<[^>]+>/.test(content)
  }

  return {
    sanitizeHTML,
    renderLaTeX,
    processContent,
    hasLaTeX,
    hasHTML,
  }
}
